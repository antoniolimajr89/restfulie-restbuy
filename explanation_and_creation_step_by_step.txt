rails new restbuy
cd restbuy
git init
rails g scaffold product name:string price:decimal
rails g model item product_id:integer quantity:integer order_id:integer
rails g scaffold order address:string state:string
rails g model payment value:decimal order_id:integer card_number:string card_holder:string state:string
gc "system models in place"


# jquery
curl -L http://code.jquery.com/jquery-1.4.2.min.js > public/javascripts/jquery.js
curl -L http://github.com/rails/jquery-ujs/raw/master/src/rails.js > public/javascripts/rails.js
curl -L http://github.com/cairesvs/formfy/raw/master/formfy.js > public/javascripts/formfy.js

# application.rb
descomenta a linha de javascript, adiciona formfy

config.action_controller.allow_forgery_protection    = false



rails g migration insert_sample_products
echo "class InsertSampleProducts < ActiveRecord::Migration
  def self.up
		Product.create :name => 'Apple macbook pro', :price => 1000
		Product.create :name => 'Rest Training (20h)', :price => 800
		Product.create :name => 'Modern Software architecture and Design (20h)', :price => 800
		Product.create :name => 'Ipad', :price => 600
		Product.create :name => 'Audi TT', :price => 40000
		Product.create :name => 'Flowers', :price => 20
  end

  def self.down
		Product.delete_all
  end
end" > db/migrate/*_insert_sample_products*

rake db:create db:migrate
gc "database created"

rails g controller System logout
rails g controller Payments create
rails g controller Admin index update_payment update_order


4 min/question in each part

SLIDES
http://caelumobjects.com/training/

# PART 1: 10 minutes: tag 1-webbuy
Presenting a server:
- create
- pay
- admin: unpaid, refused, preparing
- admin: preparing -> delivering
- delivering -> delivered, failed to deliver
- share payment between friends
- search
- cancel is not working

# PART 2: 10 minutes: tag 2-opensearch
suporta opensearch, mostra cliente
curl http://localhost:3000/products/opensearch.xml
curl http://localhost:3000/products?q=apple\&format=xml
curl http://localhost:3000/products?q=\&format=xml
(amazon can consume, google consumes, browser can consume)

# client_spec.rb

# PART 3: 10 minutes: tag 3-create-basket
creates and redirects to the basket

# PART 5: 10 minutes: tag 5-restfulie-atom
serving atom
simpler tokamak builder

# PART 6: 5 minutes: tag 6-restfulie-json-xml
serving xml and json with restfulie products

# PART 7: 10 minutes: tag 7-add-product
picks the first product from the search and adds to the basket



# PART 8: 10 minutes: 8-its-time-to-pay
payment time

# PART 9: 10 minutes: 9-polling-print-my-receipt
polling every 10 secs until its confirmed
- mention WEBSOCKET integration event
- mention RSS feed event

# PART 10: 5 minutes: 10-refresh-me-baby
refresh = self.follow.get

# PART 11: 10 minutes: 11-retry-payment
try to repay up twice

# PART 12: 10 minutes: 12-cancel
if is unable to do it, cancel

# PART 13: 15 minutes: 13-cache-control
client side cache
curl http://localhost:3000/products/1.xml -i





# PART 14: 15 minutes: 14-create-trait
server create is a trait
show created Trait code
curl http://localhost:3000/products -H "Content-type: application/xml" -H "Accept: application/xml" -d "<product><name>architecture by architects</name><price>300</price></product>" -i

# PART 15: 5 minutes: 15-created-trait-exists
extract it

# PART 16: 10 minutes: 16-share-payment
share the payment with a friend

# PART 17: 10 minutes: 17-calendar
rails g controller Calendar show
curl http://localhost:3000/orders/192.xml -i
curl http://localhost:3000/orders/192/calendar -i

# PART 18: 10 minutes: 18-add-calendar-tracking-and-cancel
link cancel, order, receipt, tracking
comment on link header

# PART 19: 10 minutes: 19-show-content-in-other-system
# do not execute: gem install heroku
show information on your order




# PART 20: 5 minutes: 20-integrate-and-profit
extra suggestion with form
every time the person opens any of his system, he breathes your system
2 days after delivery, suggest a new product through his calendar

i.e. in his company system and sees his training, he would
be able to recommend it to someone, or enroll to other trainings, see his colleages emails and os on

# PART 21: 5 min: 21-relata-and-trait
refactoring bonus

# PART 22: 20 min: 22-heroku-pays-and-cache-heaven
delegating part of the system (payment example)
rails new restpay
rails g model payment value:decimal order_id:integer  card_number:string card_holder:string state:string system_id:string resource_id:string
rails g controller Payments create show
rake db:create db:migrate
rails s --port=3100
show approval on the console
sudo varnishd -a 127.0.0.1:3100 -b 127.0.0.1:3101 -s file,/tmp,500M
varnishstat -w 5
rails s --port=3101
rails c
Payment.approve_all
huge cache benefits
polling benefits

# PART 23: 15 min: 23-mentions
- mention: evolution: invoking another system
- mention: RELAXNG example: must ignore, forward compatibility
- mention: supporting PATCH
- mention: supporting a profile 
- mention: search in another site
- mention: AUTHentication
- mention: AUTHorization
- mention: bank, the ruler
- mention: tag use-form-to-add uses a form to add an item to the basket
- mention :error handling
- mention : conditional put (faul tolerant)
- mention: mikyung/camel/esbs
